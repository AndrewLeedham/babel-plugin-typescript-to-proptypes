// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`plugin transforms: custom-react-import-name.ts 1`] = `
"import PropTypes from 'prop-types';
import R from 'react';
interface Props {
  name: string;
}
export default class ClassCustomReactImportName extends R.Component<Props> {
  static propTypes = {
    name: PropTypes.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`plugin transforms: custom-react-import-name-pure.ts 1`] = `
"import PropTypes from 'prop-types';
import R from 'react';
interface Props {
  name: string;
}
export default class ClassCustomReactImportNamePure extends R.PureComponent<Props> {
  static propTypes = {
    name: PropTypes.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`plugin transforms: merge-with-existing-proptypes.ts 1`] = `
"import React from 'react';
import PropTypes from 'prop-types';
interface Props {
  name: string;
}
export default class ClassMergeWithExistingPropTypes extends React.Component<Props> {
  static propTypes = {
    name: PropTypes.string.isRequired,
    custom: PropTypes.number.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`plugin transforms: merge-with-no-override.ts 1`] = `
"import React from 'react';
import PropTypes from 'prop-types';
interface Props {
  name: string;
}
const CustomShape = PropTypes.string;
export default class ClassMergeWithNoOverride extends React.Component<Props> {
  static propTypes = {
    name: CustomShape.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`plugin transforms: missing-type.ts 1`] = `
"import PropTypes from 'prop-types';
import React from 'react';
export default class ClassMissingType extends React.Component<Props> {
  render() {
    return null;
  }

}"
`;

exports[`plugin transforms: named-react-imports.ts 1`] = `
"import PropTypes from 'prop-types';
import React, { Component } from 'react';
interface Props {
  name: string;
}
export default class ClassNamedReactImports extends Component<Props> {
  static propTypes = {
    name: PropTypes.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`plugin transforms: named-react-imports-pure.ts 1`] = `
"import PropTypes from 'prop-types';
import React, { PureComponent } from 'react';
interface Props {
  name: string;
}
export default class ClassNamedReactImportsPure extends PureComponent<Props> {
  static propTypes = {
    name: PropTypes.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`plugin transforms: no-generics.ts 1`] = `
"import React from 'react';
export default class ClassNoGenerics extends React.Component {
  render() {
    return null;
  }

}"
`;

exports[`plugin transforms: no-prop-types-import.ts 1`] = `
"import PropTypes from 'prop-types';
import React from 'react';
export interface Props {
  name: string;
}
export default class NoPropTypesImport extends React.Component<Props> {
  static propTypes = {
    name: PropTypes.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`plugin transforms: no-type-propeties.ts 1`] = `
"import PropTypes from 'prop-types';
import React from 'react';
interface Props {}
export default class ClassNoTypeProperties extends React.Component<Props> {
  render() {
    return null;
  }

}"
`;

exports[`plugin transforms: standard.ts 1`] = `
"import PropTypes from 'prop-types';
import React from 'react';
interface Props {
  name: string;
}
export default class ClassStandard extends React.Component<Props> {
  static propTypes = {
    name: PropTypes.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`plugin transforms: type-array.ts 1`] = `
"import PropTypes from 'prop-types';
import React from 'react';
export interface Props {
  any: any[];
  null: null[];
  numbers?: number[];
  strings: string[];
  booleans: boolean[];
  objects?: object[];
  union: (string | number)[];
  intersection: (string & number)[];
  nested?: string[][];
}
export default class TypeArray extends React.Component<Props> {
  static propTypes = {
    any: PropTypes.array.isRequired,
    null: PropTypes.array.isRequired,
    numbers: PropTypes.arrayOf(PropTypes.number),
    strings: PropTypes.arrayOf(PropTypes.string).isRequired,
    booleans: PropTypes.arrayOf(PropTypes.bool).isRequired,
    objects: PropTypes.arrayOf(PropTypes.object),
    union: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])).isRequired,
    intersection: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])).isRequired,
    nested: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string))
  };

  render() {
    return null;
  }

}"
`;

exports[`plugin transforms: type-enum.ts 1`] = `
"import PropTypes from 'prop-types';
import React from 'react';
export interface Props {
  union: number | string | object;
  intersection?: number & string & object;
  combined: number & (string | object);
  strUnion?: 'foo' | 'bar' | 'baz';
  strIntersection: 'foo' & 'bar' & 'baz';
  numUnion: 1 | 2 | 3;
  numIntersection?: 1 & 2 & 3;
}
export default class TypeEnum extends React.Component<Props> {
  static propTypes = {
    union: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.object]).isRequired,
    intersection: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.object]),
    combined: PropTypes.oneOfType([PropTypes.number, PropTypes.oneOfType([PropTypes.string, PropTypes.object])]).isRequired,
    strUnion: PropTypes.oneOf(['foo', 'bar', 'baz']),
    strIntersection: PropTypes.oneOf(['foo', 'bar', 'baz']).isRequired,
    numUnion: PropTypes.oneOf([1, 2, 3]).isRequired,
    numIntersection: PropTypes.oneOf([1, 2, 3])
  };

  render() {
    return null;
  }

}"
`;

exports[`plugin transforms: type-function.ts 1`] = `
"import PropTypes from 'prop-types';
import React from 'react';
export interface Props {
  void: () => void;
  objReturn: () => {};
  typeReturn?: () => string;
  args: (a: number, b: boolean) => null;
  parens?: (() => void);
  handler: React.ChangeEventHandler;
}
export default class TypeFunction extends React.Component<Props> {
  static propTypes = {
    void: PropTypes.func.isRequired,
    objReturn: PropTypes.func.isRequired,
    typeReturn: PropTypes.func,
    args: PropTypes.func.isRequired,
    parens: PropTypes.func,
    handler: PropTypes.func.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`plugin transforms: type-object.ts 1`] = `
"import PropTypes from 'prop-types';
import React from 'react';
export interface Props {
  object: object;
  empty: {};
  index?: {
    [key: string]: number;
  };
  shape: {
    id: number;
    name?: string;
    status: 'active' | 'pending';
  };
}
export default class TypeObject extends React.Component<Props> {
  static propTypes = {
    object: PropTypes.object.isRequired,
    empty: PropTypes.object.isRequired,
    index: PropTypes.objectOf(PropTypes.number),
    shape: PropTypes.shape({
      id: PropTypes.number.isRequired,
      name: PropTypes.string,
      status: PropTypes.oneOf(['active', 'pending']).isRequired
    }).isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`plugin transforms: type-primitives.ts 1`] = `
"import PropTypes from 'prop-types';
import React from 'react';
export interface Props {
  number: number;
  string: string;
  boolean: boolean;
  symbol: symbol;
  numberOpt?: number;
  stringOpt?: string;
  booleanOpt?: boolean;
  symbolOpt?: symbol;
}
export default class TypePrimitives extends React.Component<Props> {
  static propTypes = {
    number: PropTypes.number.isRequired,
    string: PropTypes.string.isRequired,
    boolean: PropTypes.bool.isRequired,
    symbol: PropTypes.symbol.isRequired,
    numberOpt: PropTypes.number,
    stringOpt: PropTypes.string,
    booleanOpt: PropTypes.bool,
    symbolOpt: PropTypes.symbol
  };

  render() {
    return null;
  }

}"
`;

exports[`plugin transforms: type-react.ts 1`] = `
"import PropTypes from 'prop-types';
import React, { ReactText, ReactNode, ReactType, ComponentType, ComponentClass, StatelessComponent, MouseEvent, ReactElement, SFCElement } from 'react';
export interface Props {
  text: React.ReactText;
  textAlias?: ReactText;
  node: React.ReactNode;
  nodeAlias?: ReactNode;
  type: React.ReactType;
  typeAlias?: ReactType;
  comp: React.ComponentType;
  compGeneric?: React.ComponentType<any>;
  compAlias: ComponentType;
  cls: React.ComponentClass;
  clsGeneric?: React.ComponentClass<any>;
  clsAlias: ComponentClass;
  sfc: React.StatelessComponent;
  sfcGeneric?: React.StatelessComponent<any>;
  sfcAlias: StatelessComponent;
  el: React.ReactElement<any>;
  elAlias?: ReactElement<any>;
  sfcEl: React.SFCElement<any>;
  sfcElAlias?: SFCElement<any>;
  jsx: JSX.Element;
  event: React.MouseEvent;
  eventAlias?: MouseEvent;
  ref: React.Ref<any>;
}
export default class TypeReact extends React.Component<Props> {
  static propTypes = {
    text: PropTypes.node.isRequired,
    textAlias: PropTypes.node,
    node: PropTypes.node.isRequired,
    nodeAlias: PropTypes.node,
    type: PropTypes.node.isRequired,
    typeAlias: PropTypes.node,
    comp: PropTypes.node.isRequired,
    compGeneric: PropTypes.node,
    compAlias: PropTypes.node.isRequired,
    cls: PropTypes.node.isRequired,
    clsGeneric: PropTypes.node,
    clsAlias: PropTypes.node.isRequired,
    sfc: PropTypes.node.isRequired,
    sfcGeneric: PropTypes.node,
    sfcAlias: PropTypes.node.isRequired,
    el: PropTypes.element.isRequired,
    elAlias: PropTypes.element,
    sfcEl: PropTypes.element.isRequired,
    sfcElAlias: PropTypes.element,
    jsx: PropTypes.element.isRequired,
    event: PropTypes.object.isRequired,
    eventAlias: PropTypes.object,
    ref: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]).isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`plugin transforms: with-custom-prop-types-import-name.ts 1`] = `
"import React from 'react';
import PT from 'prop-types';
export interface Props {
  name: string;
}
export default class WithCustomPropTypesImportName extends React.Component<Props> {
  static propTypes = {
    name: PT.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`plugin transforms: with-custom-react-import-name.ts 1`] = `
"import PropTypes from 'prop-types';
import R from 'react';
export interface Props {
  name: string;
}
export default class WithCustomReactImportName extends R.Component<Props> {
  static propTypes = {
    name: PropTypes.string.isRequired
  };

  render() {
    return null;
  }

}"
`;

exports[`plugin transforms: with-prop-types-import.ts 1`] = `
"import React from 'react';
import PropTypes from 'prop-types';
export interface Props {
  name: string;
}
export default class WithPropTypesImport extends React.Component<Props> {
  static propTypes = {
    name: PropTypes.string.isRequired
  };

  render() {
    return null;
  }

}"
`;
